import java.io.*;

public class alignment {
	private final static int gapCost=-8;
	public static int length, matches, replacements, deletions;
	
	
	private static void fillDotplot(String[] pairs, int[][] matrix) {
		int dotplot[][] = new int[pairs[0].length()][pairs[1].length()];
		char dotway [][] = new char[pairs[0].length()][pairs[1].length()];
		//1.Zeile auf Null setzen
		for (int i=0; i < pairs[0].length(); i++){
			dotplot[i][0]=0;
			dotway[i][0]='x';
		}
		//1.Spalte auf Null setzen
		for (int i=0; i < pairs[1].length(); i++){
			dotplot[0][i]=0;
			dotway[0][i]='x';
		}
		// Berechne die Matrixwerte
		for (int i=1; i<pairs[0].length(); i++){
			for(int j=1; j < pairs[1].length();j++){
				int l = dotplot[i-1][j]+gapCost;
				int u = dotplot[i][j-1]+gapCost;
				int d = dotplot[i-1][j-1]+alignCost(pairs, matrix, i,j);
				int x = 0;
				//Finde das Maximum
				if (x>=d && x>=u && x>=l){
					dotplot[i][j] = x;
					dotway [i][j] = 'x';
				}
				else if (l>=d && l>=u && l>=x){
					dotplot[i][j] = l;
					dotway [i][j] = 'l';
				}	
				else if (u>=d && u>=l && u>=x){
					dotplot[i][j] = u;
					dotway [i][j] = 'u';
				}	
				else {
					dotplot[i][j] = d;
					dotway [i][j] = 'd';	
				}
			}
	   }
		findeMax(dotplot, dotway, pairs);
	}
	
	private static void findeMax(int[][]dotplot, char[][]dotway, String[] pairs) {
		int max = 0;
		int maxi = 0;
		int maxj = 0;
		for (int i=1; i<pairs[0].length(); i++){
			for(int j=1; j < pairs[1].length();j++){
				if (dotplot[i][j] > max){ 
					max = dotplot[i][j];
					maxi = i;
					maxj = j;
				}
			}
		}
		System.out.println("Alignment:");
		printAlignmentPair1 (dotplot, dotway, pairs, max, maxi, maxj);
		printAlignmentBetween (dotplot, dotway, pairs, max, maxi, maxj);
		printAlignmentPair2 (dotplot, dotway, pairs, max, maxi, maxj);
		System.out.println();
		System.out.println("Score: " + max);
		System.out.println("Length: " + length);
		System.out.println("Matches: " + matches);
		System.out.println("Replacements: " + replacements);
		System.out.println("Deletions/Insertions: " + deletions);
		System.exit(1);
	}
	
	private static void printAlignmentPair1(int[][]dotplot, char[][]dotway, String[] pairs, int max, int i, int j) {
		String DNA1 ="";
		while (dotplot[i][j]!=0){
			switch (dotway[i][j]){
				case 'l': i = i-1;
				DNA1 = DNA1 + pairs[0].charAt(i);
						break;
				case 'u': j = j-1;
				DNA1 = DNA1 + "_";
						break;
				case 'd': i=i-1;
						j= j-1;
				DNA1 = DNA1 + pairs[0].charAt(i);
						break;
				default: break;
			}
		}
		String reverse = new StringBuffer(DNA1).reverse().toString();
		System.out.println(reverse);
	}
	
	private static void printAlignmentBetween(int[][]dotplot, char[][]dotway, String[] pairs, int max, int i, int j) {
		String Between ="";
		length=0;
		matches=0;
		replacements=0;
		deletions=0;
		while (dotplot[i][j]!=0){
			length++;
			switch (dotway[i][j]){
				case 'l': i = i-1;
						Between= Between + " ";
						deletions++;
						break;
				case 'u': j = j-1;
						Between = Between + " ";
						deletions++;
						break;
				case 'd': i=i-1;
						j= j-1;
						if (pairs[0].charAt(i) == pairs[1].charAt(j)){
							Between = Between + "|";
							matches++;
						}
						else Between = Between + ".";
						replacements++;
						break;
				default: break;
			}
		}
		String reverse = new StringBuffer(Between).reverse().toString();
		System.out.println(reverse);
	}
	
	private static void printAlignmentPair2(int[][]dotplot, char[][]dotway, String[] pairs, int max, int i, int j) {
		String DNA2 ="";
		while (dotplot[i][j]!=0){

			switch (dotway[i][j]){
				case 'l': i = i-1;
						DNA2 = DNA2 + '_';
						break;
				case 'u': j = j-1;
						DNA2 = DNA2 + pairs[1].charAt(j);
						break;
				case 'd': i=i-1;
						j= j-1;
						DNA2 = DNA2 + pairs[1].charAt(j);
						break;
				default: break;
			}
		}
		String reverse = new StringBuffer(DNA2).reverse().toString();
		System.out.println(reverse);
	}
	

	
	private static int alignCost(String[] pairs, int[][] matrix, int i, int j) {
		char base1 = pairs[0].charAt(i);
		int k = baseNumber (base1);
		char base2 = pairs[1].charAt(j);
		int l = baseNumber(base2);
		return matrix[k][l];
	}
	private static int baseNumber(char base) {
		switch (base){
		case 'A': return 0;
		case 'T': return 1;
		case 'G': return 2;
		case 'C': return 3;
		default: return 4;
		}
	}


	
	
    private static String[] loadFasta(String file) {
		String[] pairs = new String[2];
		String temp;
		try (BufferedReader br = new BufferedReader(new FileReader(file))) {
			for (int i=0; i<2;i++){
	            temp = br.readLine();
	            if(temp != null){
	                while(temp.charAt(0) == '>'){
	                temp = br.readLine();
	                }
	            pairs[i]=temp;
	            }
			}
        }catch(IOException e){
            e.printStackTrace();
        }
        return pairs;
    }
	
    private static int[][] loadMatrix(String file) {
		int[][] matrix = new int[5][5];
	       String temp = null;
	       try (BufferedReader br = new BufferedReader(new FileReader(file))){
	           temp = br.readLine();
	           if(temp != null){
	        	   while(temp.charAt(0) == '#'){  //alle Zeilen die mit # anfangen herausnehmen
		                temp = br.readLine();
		           }
	        	   temp = br.readLine(); //erste Zeile mit ATGC herausnehmen
	        	   int j=0;
	   	        	while(temp != null){
	   	        		for(int i=4; i<temp.length(); i=i+4){
	   	        			if(temp.charAt(i-1) == '-')matrix[j][i/4-1] = (Character.getNumericValue(temp.charAt(i)))*-1;
	   	        			else matrix[j][i/4-1] = (Character.getNumericValue(temp.charAt(i)));   
	   	            }
	   	            if(j == 4)
		                break;
		            j++;
		            temp = br.readLine();
		        }
		        for(int k=0; k<matrix.length; k++){
		            matrix[4][k]=gapCost;
		            matrix[k][4]=gapCost;
		        }
	           }
	       }catch(IOException e){
	                e.printStackTrace();
	        }
        return matrix;
    }	
	
	public static void main(String[] args) throws FileNotFoundException, IOException {

		if (args.length != 2) {
			System.out.println("Geben Sie bitte \"pairs.fasta\" und \"matrix.txt\" als Argumente an!");
			System.exit(1);
	    }

        String[] pairs = loadFasta(args[0]);
        int[][] matrix = loadMatrix(args[1]);
		fillDotplot(pairs, matrix);		
	}
}
